#version 450

#define g -9.82

layout(set = 0, binding = 0) uniform UBO
{
    float deltaTime;
} ubo;

layout(set = 1, binding = 0) uniform InfoUBO
{
    uint particleCount;
    uint edgeCount;
    uint tetrahedralCount;
} info;

struct Particle
{
    vec3 position;
    vec3 velocity;
	float invMass;
};

layout(std140, set = 1, binding = 1) buffer ParticlesSSBO
{
	Particle particles[];
};

struct PbdPositions
{
	vec3 predict;
    vec3 delta;
};

layout(std140, set = 1, binding = 2) buffer PositionsSSBO
{
	PbdPositions positions[];
};

layout(local_size_x = 32) in;

void main()
{
	uint index = gl_GlobalInvocationID.x;
	if(index >= info.particleCount)
		return;

	positions[index].delta = vec3(0.0);
	particles[index].velocity += vec3(0.0, 1.0, 0.0) * ubo.deltaTime * g;
	particles[index].position = positions[index].predict;
	positions[index].predict += particles[index].velocity * ubo.deltaTime;

	// Hit ground
	if(positions[index].predict.y < 0.0)
	{
		positions[index].predict = particles[index].position;
		positions[index].predict.y = 0.0;
	}
}
#version 450
#extension GL_EXT_shader_atomic_float : enable

layout(set = 0, binding = 0) uniform UBO
{
    float deltaTime;
	float distanceCompliance;
	float volumeCompliance;
} ubo;

struct Particle
{
    vec3 position;
    vec3 velocity;
	float invMass;
};

layout(std140, set = 1, binding = 0) buffer ParticlesSSBO
{
	Particle particles[];
};

struct PbdPositions
{
	vec3 predict;
    vec3 delta;
};

layout(std140, set = 1, binding = 1) buffer PositionsSSBO
{
	PbdPositions positions[];
};

struct Edge
{
	uvec2 indices;
	float restLen;
};

layout(std140, set = 1, binding = 2) buffer EdgesSSBO
{
	Edge edges[];
};

layout(local_size_x = 1) in;

void main()
{
	float alpha = ubo.distanceCompliance / 100.0 / ubo.deltaTime / ubo.deltaTime;
	uint index = gl_GlobalInvocationID.x;

	float w = particles[edges[index].indices[0]].invMass + particles[edges[index].indices[1]].invMass;
	if(w == 0.0)
		return;
	
	vec3 diff = positions[edges[index].indices[0]].predict - positions[edges[index].indices[1]].predict;
	float len = length(diff);
	if(len == 0.0)
		return;

	diff /= len;
	float rest = edges[index].restLen;
	float gradient = len - rest;

	float correction = -gradient / (w + alpha);
	vec3 corrVec0 = correction * diff * particles[edges[index].indices[0]].invMass;
	vec3 corrVec1 = -correction * diff * particles[edges[index].indices[1]].invMass;

	//positions[edges[index].indices[0]].delta += corrVec;
	//positions[edges[index].indices[1]].delta -= corrVec;

	for(int i = 0; i < 3; i++)
	{
		atomicAdd(positions[edges[index].indices[0]].delta[i], corrVec0[i]);
		atomicAdd(positions[edges[index].indices[1]].delta[i], corrVec1[i]);
	}
}
#version 450

#define g -9.82
#define epsilon 0.000001
#define maxConstraints 10000

layout(set = 0, binding = 0) uniform UBO
{
    float deltaTime;
    uint triCount;
} ubo;

layout(std140, set = 0, binding = 1) buffer ColPositionsSSBO
{
	vec3 colPositions[];
};

layout(std430, set = 0, binding = 2) buffer TriIndicesSSBO
{
	uint triIndices[];
};

layout(set = 1, binding = 0) uniform InfoUBO
{
    uint particleCount;
    uint edgeCount;
    uint tetrahedralCount;
} info;

struct Particle
{
    vec3 position;
    vec3 velocity;
	float invMass;
};

layout(std140, set = 1, binding = 1) buffer ParticlesSSBO
{
	Particle particles[];
};

struct PbdPositions
{
	vec3 predict;
    vec3 delta;
};

layout(std140, set = 1, binding = 2) buffer PositionsSSBO
{
	PbdPositions positions[];
};

layout(set = 1, binding = 3) buffer Size 
{
    uint colSize;
};

struct ColConstraint
{
    vec3 orig;
    uint particleIndex;
    vec3 normal;
};

layout(std140, set = 1, binding = 4) buffer ColConstraintSSBO
{
	ColConstraint colConstraints[];
};

layout(local_size_x = 32) in;

void main()
{
    uint index = gl_GlobalInvocationID.x;
	if(index >= ubo.triCount)
		return;
    index *= 3;

    vec3 e1 = colPositions[triIndices[index + 1]] - colPositions[triIndices[index]];
	vec3 e2 = colPositions[triIndices[index + 2]] - colPositions[triIndices[index]];

    for(int i = 0; i < info.particleCount; i++)
    {
        vec3 p0 = positions[i].predict;
        vec3 p1 = p0 + (particles[i].velocity + vec3(0.0, ubo.deltaTime * g, 0.0)) * ubo.deltaTime;

        vec3 dir = normalize(p1 - p0);

        vec3 p = cross(dir, e2);
        float det = dot(e1, p);

        if(det > -epsilon && det < epsilon)
            continue;

        float invDet = 1.0 / det;
        vec3 hit = p0 - colPositions[triIndices[index]];

        float u = dot(hit, p) * invDet;
        if(u < 0.0 || u > 1.0)
            continue;

        vec3 q = cross(hit, e1);
        float v = dot(dir, q) * invDet;
        if(v < 0.0 || u + v > 1.0)
            continue;

        float t = dot(e2, q) * invDet;
        if(t <= length(p1 - p0))
        {
            uint id = atomicAdd(colSize, 1);
            if(id > maxConstraints)
                break;

            colConstraints[id].orig = colPositions[triIndices[index]];
            colConstraints[id].particleIndex = i;
            colConstraints[id].normal = normalize(cross(e1, e2));
        }
    }
}